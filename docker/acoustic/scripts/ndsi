#!/usr/bin/Rscript


# Normalized Difference Soundscape Index (NDSI)

# read sounds directory as argument
# example: ndsi -d /home/sounds -o ndsi.tsv

# version 2  (2020-06-08)
#  added trycatch


library("optparse")
library("tuneR")
library("soundecology")

option_list = list(

    make_option(c("-d", "--directory"), type="character", default=NULL, 
                help="sounds directory path", metavar="character"),

    make_option(c("--pattern"), type="character", default="*.wav",
                help="pattern for selecting files (default: *.wav)",
                metavar="character"),

    make_option(c("-o", "--output"), type="character", default="ndsi_out.tsv", 
                help="output file name [default= %default]", metavar="character"),

    make_option(c("-f", "--fft_w"), type="integer", default=1024, 
                help="FFT window to use (default: 1024)",
                metavar="number"),

    make_option(c("--anthro_min"), type="integer", default=1000, 
                help="minimum value of the range of frequencies of the anthrophony (default: 1000)",
                metavar="number"),

    make_option(c("--anthro_max"), type="integer", default=2000, 
                help="maximum value of the range of frequencies of the anthrophony (default: 2000)",
                metavar="number"),

    make_option(c("--bio_min"), type="integer", default=2000, 
                help="minimum value of the range of frequencies of the biophony (default: 2000)",
                metavar="number"),

    make_option(c("--bio_max"), type="integer", default=11000, 
                help="maximum value of the range of frequencies of the biophony (default: 11000)",
                metavar="number")

); 
 
opt_parser = OptionParser(option_list=option_list);
opt = parse_args(opt_parser);

if (is.null(opt$directory)){
  print_help(opt_parser)
  stop("You must supply a directory", call.=FALSE)
}

file.names <- Sys.glob(paste(opt$directory, opt$pattern, sep="/"))

# header
sink(opt$output)
cat(paste("file name",
          "NDSI left", "Biophony left", "Anthrophony left", 
          "NDSI right", "Biophony right", "Anthrophony right", 
          sep=";"))
cat("\n")
sink()


for(i in 1:length(file.names)) 
    {
 
    print(basename(file.names[i]))

    sound = readWave(file.names[i])

    r = tryCatch(
            {
            ndsi(sound, fft_w=opt$fft_w, anthro_min=opt$anthro_min, anthro_max=opt$anthro_max, bio_min=opt$bio_min, bio_max=opt$bio_max)
            },
            error = function(e) 
                        {
                        x = list()
                        x$ndsi_left = NA
                        x$ndsi_right = NA
                        x$biophony_left = NA
                        x$anthrophony_left = NA
                        x$biophony_right = NA
                        x$anthrophony_right = NA
                        return(x)
                        }
                )


    sink(opt$output, append=TRUE)
    cat(paste(basename(file.names[i]),
              r$ndsi_left, r$biophony_left, r$anthrophony_left, 
              r$ndsi_right, r$biophony_right, r$anthrophony_right,
              sep=";"))
    cat("\n")
    sink()
    }




