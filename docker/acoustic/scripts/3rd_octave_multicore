"""
compute 3rd octave with parselmouth and the multiprocessing module
"""

INIT_SILENT = 0.5
FINAL_SILENT = 0.5
FREQ_INTERVALS = [
    (11.2, 14.1),
    (14.1, 17.8),
    (17.8, 22.4),
    (22.4, 28.2),
    (28.2, 35.5),
    (35.5, 44.7),
    (44.7, 56.2),
    (56.2, 70.8),
    (70.8, 89.1),
    (89.1, 112),
    (112, 141),
    (141, 178),
    (178, 224),
    (224, 282),
    (282, 355),
    (355, 447),
    (447, 562),
    (562, 708),
    (708, 891),
    (891, 1122),
    (1122, 1413),
    (1413, 1778),
    (1778, 2239),
    (2239, 2818),
    (2818, 3548),
    (3548, 4467),
    (4467, 5623),
    (5623, 7079),
    (7079, 8913),
    (8913, 11220),
    (11220, 14130),
    (14130, 17780),
    (17780, 22390),
]

__version__ = "2"
__version_date__ = "2023-01-30"

import argparse
import math
import pathlib
import sys
import os
import concurrent.futures
import parselmouth
from parselmouth.praat import call


parser = argparse.ArgumentParser(
    prog="3rd_octave_mp",
    usage="\n3rd_octave -d SOUNDS_DIRECTORY_PATH [-p 'PATTERN'] [-c NUMBER_OF_CPU] -o OUTPUT",
    description="3rd octave with Parselmouth and multiprocessing",
)
parser.add_argument(
    "-d", "--directory", required=True, action="store", dest="directory", help="Set directory of WAVE files"
)
parser.add_argument(
    "-c", "--cpu", action="store", dest="cpu", default=1, type=int, help="Set number of cores to use (default 1)"
)

parser.add_argument(
    "-p",
    "--pattern",
    action="store",
    dest="pattern",
    default="*.wav",
    type=str,
    help="Set pattern for WAV file selection (default is *.wav)",
)


parser.add_argument("-o", "--output", action="store", dest="output", help="Set path for the output file")
parser.add_argument("-v", "--version", action="version", version=f"%(prog)s v.{__version__} {__version_date__}")
parser.add_argument(
    "-i",
    "--initial-silence",
    action="store",
    dest="initial_silence",
    default=0,
    type=float,
    help="indicate the silence duration (in s) at the beginning of the sound",
)
parser.add_argument(
    "-f",
    "--final-silence",
    action="store",
    dest="final_silence",
    default=0,
    type=float,
    help="indicate the silence duration (in s) at the end of the sound",
)

args = parser.parse_args()

print("3rd octave with parselmouth and multiprocessing", file=sys.stderr)

if not args.directory:
    print("Sounds directory not found!")
    sys.exit(3)

if args.cpu:
    try:
        CPU = int(args.cpu)
        print(f"\nNumber of CPU to use: {CPU}", file=sys.stderr)
        MAX_WORKER = CPU
    except:
        print("CPU must be an integer")
        sys.exit(5)
else:
    print("No CPU")
    sys.exit(5)

if args.pattern:
    pattern = args.pattern
else:
    pattern = "*.wav"


def third_octave(file_name):

    print(args.initial_silence)

    if args.initial_silence or args.final_silence:
        dummy_sound = parselmouth.Sound(str(file_name))
        try:
            sound = dummy_sound.extract_part(
                args.initial_silence,
                dummy_sound.duration - args.final_silence,
                parselmouth.WindowShape.RECTANGULAR,
                1,
                False,
            )

        except Exception:
            print(
                (
                    f"Error on {file_name.NAME} parselmouth.PraatError: Extracted Sound would contain no samples. "
                    " Sound: part not extracted."
                ),
                file=sys.stderr,
            )
            return []
    else:
        # read file
        try:
            sound = parselmouth.Sound(str(file_name))
        except Exception:
            if os.path.getsize(file_name) == 0:
                print(f"Error on {file_name.name}: file is empty", file=sys.stderr)
            else:
                print(f"Error on {file_name.name}: file is not a correct WAV", file=sys.stderr)
            return []

    energy_values = [file_name.stem, round(sound.duration, 3)]
    sound_spectrum = sound.to_spectrum()
    for interval in FREQ_INTERVALS:

        try:
            energy = 20 * math.log10(sound_spectrum.get_band_energy(interval[0], interval[1]) / 0.00002)
            energy_values.append(round(energy, 2))
        except:
            print(
                f"Error on {file_name.name}: {sound_spectrum.get_band_energy(interval[0], interval[1])=} ",
                file=sys.stderr,
            )
            energy_values.append("NA")

    print(f"{file_name.name} done", file=sys.stderr)

    return energy_values


# header
header = ["file name", "duration"]
for interval in FREQ_INTERVALS:
    header.append(f"{interval[0]}_{interval[1]}_dB")
out = "\t".join(header) + "\n"

file_name_list = [x for x in pathlib.Path(args.directory).glob(pattern)]


print(f"\nProcessing {len(file_name_list)} files...", file=sys.stderr)
with concurrent.futures.ProcessPoolExecutor(max_workers=MAX_WORKER) as executor:
    results = executor.map(third_octave, file_name_list)

for result in sorted(results):
    # print(result)
    if result:
        out += "\t".join([str(x) for x in result]) + "\n"

if args.output:
    try:
        with open(args.output, "w") as f_out:
            f_out.write(out)
    except Exception:
        print(f"\nError saving results in {args.output}.\nFile {args.directory}.tsv created.", file=sys.stderr)
        with open(f"{args.directory}.tsv", "w") as f_out:
            f_out.write(out)

else:
    print(out)
