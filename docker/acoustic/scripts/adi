#!/usr/bin/Rscript


# run Acoustic Diversity Index (ADI)

# read sounds directory as argument
# example: adi -d /home/sounds -o adi.tsv -c 2

library("optparse")
library("tuneR")  # required for readWave
library("soundecology")

option_list = list(

    make_option(c("-d", "--directory"), type="character", default=NULL, 
                help="sounds directory path", metavar="character"),

    make_option(c("-o", "--output"), type="character", default="adi_out.tsv", 
                help="output file name [default= %default]", metavar="character"),

    make_option(c("-m", "--max_freq"), type="integer", default=10000, 
                help="Maximum frequency to use when calculating the value", metavar="number"),

    make_option(c("-t", "--db_treshold"), type="integer", default=-50, 
                help="Threshold to use in the calculation", metavar="number"),

    make_option(c("-b", "--freq_step"), type="integer", default=1000, 
                help="Size of frequency bands", metavar="number"),

    make_option(c("-s", "--shannon"), type="logical", default=TRUE, 
                help="Use the Shannon's diversity index to calculate the ADI", metavar="number"),

    make_option(c("-c", "--cpu"), type="integer", default=1, 
                help="Number of cores to use", metavar="number")
); 
 
opt_parser = OptionParser(option_list=option_list);
opt = parse_args(opt_parser);

if (is.null(opt$directory)){
  print_help(opt_parser)
  stop("You must supply a directory", call.=FALSE)
}

if (is.null(opt$shannon)) {
    shannon = TRUE
} else {
    shannon = opt$shannon
}


file.names <- Sys.glob(paste(opt$directory, '*.wav', sep="/"))

# header
sink(opt$output)
cat(paste("FILENAME","SAMPLINGRATE","BIT","DURATION","CHANNELS","INDEX","MAX_FREQ","DB_THRESHOLD","FREQ_STEPS",
          "LEFT_CHANNEL", "RIGHT_CHANNEL",
          sep=","))
cat("\n")
sink()

for(i in 1:length(file.names)){

    sound = readWave(file.names[i])

    # duration
    duration = 0
    if (length(sound@left))
        {
        duration = length(sound@left) / sound@samp.rate
        }
    else if (length(sound@right)) {
       duration = length(sound@right) / sound@samp.rate
    }

    # channels
    if (sound@stereo)
        {channels = 2}
    else
        {channels = 1}

    r = tryCatch(
            {acoustic_diversity(sound, max_freq = opt$max_freq, db_threshold = opt$db_treshold, freq_step = opt$freq_step, shannon = shannon)},
            error = function(e) 
                        {
                        x = list()
                        x$adi_left = NA
                        x$adi_right = NA
                        return(x)
                        }
                )

    sink(opt$output, append=TRUE)
    cat(paste(basename(file.names[i]), 
              sound@samp.rate,
              sound@bit,
              duration,
              channels,
              'acoustic_diversity',

              opt$max_freq, opt$db_treshold, opt$freq_step, r$adi_left, r$adi_right, sep=","))
    cat("\n")
    sink()
}




